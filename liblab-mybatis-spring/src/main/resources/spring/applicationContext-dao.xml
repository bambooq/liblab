<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- 对 <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 的简化 -->
    <context:property-placeholder location="classpath:db.properties" ignore-resource-not-found="true" system-properties-mode="OVERRIDE"/>

    <!-- 属性资源文件
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <list>
                <value>classpath:/db.properties</value>
            </list>
        </property>
    </bean>
    -->

    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="filters" value="stat" />
        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />
        <property name="timeBetweenEvictionRunsMillis" value="3000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
    </bean>

    <!-- 定义mybatis的SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--
        1、mybatis-spring.jar从1.3.0版本开始，可以不用通过configLocation属性加载mybatis-config.xml文件从而设置 <settings> 和 <typeAliases> 片段。
        2、替换方式为使用如下配置属性。-->
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <property name="cacheEnabled" value="true"/>
                <property name="lazyLoadingEnabled" value="true"/>
                <property name="defaultStatementTimeout" value="20000"/>
                <property name="aggressiveLazyLoading" value="false"/>
                <property name="mapUnderscoreToCamelCase" value="true"/><!-- 下划线转驼峰，resultType 属性要与之匹配的驼峰规则属性 -->
            </bean>
        </property>
    </bean>

    <!--
    通过自动扫描生成mapper代理方式使用mybatis
    1、scan for mappers and let them be autowired ；
    2、<mybatis:scan/> and @MapperScan are features introduced in MyBatis-Spring 1.2.0 -->
    <mybatis:scan base-package="cn.com.nlsoft.dao"/>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <!-- 通过注入SqlSessionTemplate方式使用mybatis -->
    <bean id="accountMapper1Impl" class="cn.com.nlsoft.dao.impl.AccountMapper1Impl">
        <property name="sqlSession" ref="sqlSession" />
    </bean>

    <!-- 通过继承SqlSessionDaoSupport使用mybatis -->
    <bean id="accountMapperImpl" class="cn.com.nlsoft.dao.impl.AccountMapperImpl">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>
</beans>
